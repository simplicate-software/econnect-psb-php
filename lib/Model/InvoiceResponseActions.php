<?php
/**
 * InvoiceResponseActions
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  EConnect\Psb
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PSB API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: techsupport@econnect.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EConnect\Psb\Model;

use \ArrayAccess;
use \EConnect\Psb\ObjectSerializer;

/**
 * InvoiceResponseActions Class Doc Comment
 *
 * @category Class
 * @description Expectations towards the seller    [NOA] No action required.    [PIN] Provide information. Missing information requested without re-issuing invoice.    [NIN] Issue new invoice. Request to re-issue a corrected invoice.    [CNF] Credit fully. Request to fully cancel the referenced invoice with a credit note.    [CNP] Credit partially. Request to issue partial credit note for corrections only.    [CNA] Credit the amount. Request to repay the amount paid on the invoice.     [OTH] Other. Requested action is not defined by code.                  Status Clarification Action list:  ./misc/codeList.html#status-clarification-action
 * @package  EConnect\Psb
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InvoiceResponseActions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceResponse_actions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'noa' => 'string',
        'pin' => 'string',
        'nin' => 'string',
        'cnf' => 'string',
        'cnp' => 'string',
        'cna' => 'string',
        'oth' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'noa' => null,
        'pin' => null,
        'nin' => null,
        'cnf' => null,
        'cnp' => null,
        'cna' => null,
        'oth' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'noa' => 'NOA',
        'pin' => 'PIN',
        'nin' => 'NIN',
        'cnf' => 'CNF',
        'cnp' => 'CNP',
        'cna' => 'CNA',
        'oth' => 'OTH'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'noa' => 'setNoa',
        'pin' => 'setPin',
        'nin' => 'setNin',
        'cnf' => 'setCnf',
        'cnp' => 'setCnp',
        'cna' => 'setCna',
        'oth' => 'setOth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'noa' => 'getNoa',
        'pin' => 'getPin',
        'nin' => 'getNin',
        'cnf' => 'getCnf',
        'cnp' => 'getCnp',
        'cna' => 'getCna',
        'oth' => 'getOth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['noa'] = $data['noa'] ?? null;
        $this->container['pin'] = $data['pin'] ?? null;
        $this->container['nin'] = $data['nin'] ?? null;
        $this->container['cnf'] = $data['cnf'] ?? null;
        $this->container['cnp'] = $data['cnp'] ?? null;
        $this->container['cna'] = $data['cna'] ?? null;
        $this->container['oth'] = $data['oth'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets noa
     *
     * @return string|null
     */
    public function getNoa()
    {
        return $this->container['noa'];
    }

    /**
     * Sets noa
     *
     * @param string|null $noa noa
     *
     * @return self
     */
    public function setNoa($noa)
    {
        $this->container['noa'] = $noa;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return string|null
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param string|null $pin pin
     *
     * @return self
     */
    public function setPin($pin)
    {
        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets nin
     *
     * @return string|null
     */
    public function getNin()
    {
        return $this->container['nin'];
    }

    /**
     * Sets nin
     *
     * @param string|null $nin nin
     *
     * @return self
     */
    public function setNin($nin)
    {
        $this->container['nin'] = $nin;

        return $this;
    }

    /**
     * Gets cnf
     *
     * @return string|null
     */
    public function getCnf()
    {
        return $this->container['cnf'];
    }

    /**
     * Sets cnf
     *
     * @param string|null $cnf cnf
     *
     * @return self
     */
    public function setCnf($cnf)
    {
        $this->container['cnf'] = $cnf;

        return $this;
    }

    /**
     * Gets cnp
     *
     * @return string|null
     */
    public function getCnp()
    {
        return $this->container['cnp'];
    }

    /**
     * Sets cnp
     *
     * @param string|null $cnp cnp
     *
     * @return self
     */
    public function setCnp($cnp)
    {
        $this->container['cnp'] = $cnp;

        return $this;
    }

    /**
     * Gets cna
     *
     * @return string|null
     */
    public function getCna()
    {
        return $this->container['cna'];
    }

    /**
     * Sets cna
     *
     * @param string|null $cna cna
     *
     * @return self
     */
    public function setCna($cna)
    {
        $this->container['cna'] = $cna;

        return $this;
    }

    /**
     * Gets oth
     *
     * @return string|null
     */
    public function getOth()
    {
        return $this->container['oth'];
    }

    /**
     * Sets oth
     *
     * @param string|null $oth oth
     *
     * @return self
     */
    public function setOth($oth)
    {
        $this->container['oth'] = $oth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


